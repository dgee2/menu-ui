/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/Ingredient": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["Ingredient"])[];
            "application/json": (components["schemas"]["Ingredient"])[];
            "text/json": (components["schemas"]["Ingredient"])[];
          };
        };
      };
    };
  };
  "/api/Recipe": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["Recipe"])[];
            "application/json": (components["schemas"]["Recipe"])[];
            "text/json": (components["schemas"]["Recipe"])[];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewRecipe"];
          "text/json": components["schemas"]["NewRecipe"];
          "application/*+json": components["schemas"]["NewRecipe"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullRecipe"];
            "application/json": components["schemas"]["FullRecipe"];
            "text/json": components["schemas"]["FullRecipe"];
          };
        };
      };
    };
  };
  "/api/Recipe/{recipeId}": {
    get: {
      parameters: {
        path: {
          recipeId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullRecipe"];
            "application/json": components["schemas"]["FullRecipe"];
            "text/json": components["schemas"]["FullRecipe"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          recipeId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewRecipe"];
          "text/json": components["schemas"]["NewRecipe"];
          "application/*+json": components["schemas"]["NewRecipe"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullRecipe"];
            "application/json": components["schemas"]["FullRecipe"];
            "text/json": components["schemas"]["FullRecipe"];
          };
        };
      };
    };
  };
  "/api/Recipe/{recipeId}/Ingredient": {
    get: {
      parameters: {
        path: {
          recipeId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["RecipeIngredient"])[];
            "application/json": (components["schemas"]["RecipeIngredient"])[];
            "text/json": (components["schemas"]["RecipeIngredient"])[];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    FullRecipe: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      ingredients?: (components["schemas"]["RecipeIngredient"])[] | null;
    };
    Ingredient: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      units?: (components["schemas"]["StringStringValueTuple"])[] | null;
    };
    NewRecipe: {
      ingredients?: (components["schemas"]["RecipeIngredient"])[] | null;
      name?: string | null;
    };
    Recipe: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    RecipeIngredient: {
      name?: string | null;
      unit?: string | null;
      /** Format: double */
      amount?: number;
    };
    StringStringValueTuple: Record<string, never>;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
